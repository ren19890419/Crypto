#include<iostream>

using namespace std;

#define max_n 10
int m, n;
int rcd[max_n];

void Permutation(char* pStr, char* pBegin);
/////////////////////////////////////////////////////////////////////////
// Get the permutation of a string, 
// for example, input string abc, its permutation is 
// abc acb bac bca cba cab
/////////////////////////////////////////////////////////////////////////
void Permutation(char* pStr)
{
	Permutation(pStr, pStr);
}
/////////////////////////////////////////////////////////////////////////
// Print the permutation of a string, 
// Input: pStr   - input string
//        pBegin - points to the begin char of string 
//                 which we want to permutate in this recursion
/////////////////////////////////////////////////////////////////////////
void Permutation(char* pStr, char* pBegin)
{
	if (!pStr || !pBegin)
		return;
	// if pBegin points to the end of string,
	// this round of permutation is finished, 
	// print the permuted string
	if (*pBegin == '/0')
	{
		printf("%s/n", pStr);
	}
	// otherwise, permute string
	else
	{
		for (char* pCh = pBegin; *pCh != '/0'; ++pCh)
		{
			// swap pCh and pBegin
			char temp = *pCh;
			*pCh = *pBegin;
			*pBegin = temp;
			Permutation(pStr, pBegin + 1);
			// restore pCh and pBegin
			//PS:改变字符串顺序后必须还原回来！
			temp = *pCh;
			*pCh = *pBegin;
			*pBegin = temp;
		}
	}
}


void loop_permutation(int l)
{
	int i;
	if (l == n)
	{
		for (i = 0; i < n; i++)
		{
			cout << rcd[i];
			if (i < n - 1)
				cout << " ";
		}
		cout << "\n";
		return;
	}
	for (i = 0; i < m; i++)
	{
		rcd[l] = i;
		loop_permutation(l + 1);
	}
}
int main()
{
	/*while ((cin >> n >> m))
	{
		loop_permutation(0);
	}*/
	char *p;
	char str[4] = { 'a', 'b', 'c'};
	p = str;
	Permutation(str);
	return 0;
}
